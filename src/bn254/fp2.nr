use dep::std::println;
use dep::bigint::prime_field::PrimeField as Fp;

struct Fp2 {
    c0: Fp,
    c1: Fp,
}

impl Fp2 {
    fn new(c0: Fp, c1: Fp) -> Self {
        Fp2{
            c0,
            c1,
        }
    }

    fn zero() -> Fp2 {
        Fp2{
            c0: Fp::zero(),
            c1: Fp::zero(),
        }
    }

    fn one() -> Fp2 {
        Fp2{
            c0: Fp::one(),
            c1: Fp::zero(),
        }
    }

    fn add(self: Self, other: Self) -> Self {
        Self{
            c0: self.c0.add(other.c0),
            c1: self.c1.add(other.c1),
        }
    }

    fn sub(self: Self, other: Self) -> Self {
        Self{
            c0: self.c0.sub(other.c0),
            c1: self.c1.sub(other.c1),
        }
    }

    fn mul(self: Self, other: Self) -> Self {
        let t1 = self.c0.mul(other.c0);
        let t0 = self.c0.add(self.c1);
        let t2 = self.c1.mul(other.c1);
        let c1 = other.c0.add(other.c1);
        let c0 = t1.sub(t2);
        let t1 = t1.add(t2);
        let t0 = t0.mul(c1);
        let c1 = t0.sub(t1);

        Self{
            c0,
            c1,
        }
    }

    fn double(self: Self) -> Self {
        Self {
            c0: self.c0.double(),
            c1: self.c1.double(),
        }
    }

    fn square(self: Self) -> Self {
        let ab = self.c0.mul(self.c1);
        let c0c1 = self.c0.add(self.c1);
        let c0 = self.c1.neg();
        let c0 = c0.add(self.c0);
        let c0 = c0.mul(c0c1);
        let c0 = c0.sub(ab);

        Self {
            c0: c0.add(ab),
            c1: ab.double(),
        }
    }

    fn neg(self: Self) -> Self {
        Self {
            c0: self.c0.neg(),
            c1: self.c1.neg(),
        }
    }

    fn conjugate(self: Self) -> Self {
        Self {
            c0: self.c0,
            c1: self.c1.neg(),
        }
    }

    fn eq(self: Self, other: Self) -> bool {
        self.c0.eq(other.c0) & self.c1.eq(other.c1)
    }
    
    fn is_zero(self: Self) -> bool {
        self.c0.is_zero() & self.c1.is_zero()
    }

    fn is_one(self: Self) -> bool {
        self.c0.is_one() & self.c1.is_zero()
    }

    // Algorithm 7 from: https://eprint.iacr.org/2010/354.pdf
    fn mul_by_b0(self: Self, b0: Fp) -> Self {
        let c0 = self.c0.mul(b0);
        let c1 = self.c1.mul(b0);

        Self{
            c0,
            c1,
        }
    }

    // Algorithm 8 from: https://eprint.iacr.org/2010/354.pdf
    fn invert(self: Self) -> Self {
        let t0 = self.c0.mul(self.c0);
        let t1 = self.c1.mul(self.c1);
        let t0 = t0.add(t1);
        let t1 = t0.invert();
        let c0 = t1.mul(self.c0);
        let c1 = self.c1.mul(t1);
        let c1 = c1.neg();

        Self {
            c0,
            c1,
        }
    }

    fn mul_by_nonresidue(self: Self) -> Self {
        let t0 = self.c0;
        let t1 = self.c1;

        let p2 = self.double();
        let p4 = p2.double();
        let p8 = p4.double();

        let c0 = p8.c0.add(t0);
        let c0 = c0.sub(t1);

        let c1 = p8.c1.add(t1);
        let c1 = c1.add(t0);

        Self{
            c0,
            c1,
        }
    }

    fn mul_by_non_residue_1_power_1(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x70, 0xe4, 0xc9, 0xdc, 0xda, 0x35, 0x0b, 0xd6,	
                0x76, 0x21, 0x2f, 0x29, 0x08, 0x1e, 0x52, 0x5c,	
                0x60, 0x8b, 0xe6, 0x76, 0xdd, 0x9f, 0xb8, 0xe8,	
                0xdf, 0xa7, 0x65, 0x28, 0x1c, 0xb7, 0x84, 0x12
            ]),
            Fp::from_bytes([
                0xac, 0x62, 0xf3, 0x80, 0xf5, 0xf0, 0x5c, 0xca,
                0xe5, 0xc7, 0xee, 0x8e, 0x77, 0x92, 0x79, 0x74,	
                0x8e, 0x0b, 0x15, 0x12, 0xfe, 0x7c, 0x32, 0xa6,	
                0xe6, 0xe7, 0xfa, 0xb4, 0xf3, 0x96, 0x69, 0x24
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_1_power_2(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x3d, 0x55, 0x6f, 0x17, 0x57, 0x95, 0xe3, 0x99,	
                0x0c, 0x33, 0xc3, 0xc2, 0x10, 0xc3, 0x8c, 0xb7,	
                0x43, 0xb1, 0x59, 0xf5, 0x3c, 0xec, 0x0b, 0x4c,	
                0xf7, 0x11, 0x79, 0x4f, 0x98, 0x47, 0xb3, 0x2f
            ]),
            Fp::from_bytes([
                0xa2, 0xcb, 0x0f, 0x64, 0x1c, 0xd5, 0x65, 0x16,	
                0xce, 0x9d, 0x7c, 0x0b, 0x1d, 0x2a, 0xae, 0x32,	
                0x94, 0x07, 0x5a, 0xd7, 0x8b, 0xcc, 0xa4, 0x4b,	
                0x20, 0xae, 0xeb, 0x61, 0x50, 0xe5, 0xc9, 0x16
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_1_power_3(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x5a, 0x13, 0xa0, 0x71, 0x46, 0x01, 0x54, 0xdc,	
                0x98, 0x59, 0xc9, 0xa9, 0xed, 0xe0, 0xaa, 0xdb,	
                0xb9, 0xf9, 0xe2, 0xb6, 0x98, 0xc6, 0x5e, 0xdc,	
                0xdc, 0xf5, 0x9a, 0x48, 0x05, 0xf3, 0x3c, 0x06
            ]),
            Fp::from_bytes([
                0xe3, 0xb0, 0x23, 0x26, 0x63, 0x7f, 0xd3, 0x82,	
                0xd2, 0x5b, 0xa2, 0x8f, 0xc9, 0x7d, 0x80, 0x21,	
                0x2b, 0x6f, 0x79, 0xec, 0xa7, 0xb5, 0x04, 0x07,	
                0x9a, 0x04, 0x41, 0xac, 0xbc, 0x3c, 0xc0, 0x07
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_1_power_4(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x62, 0xa7, 0x1e, 0x92, 0x55, 0x1f, 0x8a, 0x84,	
                0x72, 0xec, 0x94, 0xbe, 0xf7, 0x65, 0x33, 0xd3,	
                0x84, 0x1e, 0x18, 0x5a, 0xb7, 0xc0, 0xf3, 0x80,	
                0x01, 0xa8, 0xee, 0x64, 0x5e, 0x4f, 0xb5, 0x05
            ]),
            Fp::from_bytes([
                0x26, 0x81, 0x2b, 0xcd, 0x11, 0x47, 0x3b, 0xc1,
                0x63, 0xc7, 0xde, 0x1b, 0xea, 0xd2, 0x85, 0x36,    	
                0x92, 0x1c, 0x0b, 0x3b, 0xb0, 0x80, 0x3a, 0x9f,    	
                0xee, 0x8a, 0xfd, 0xe7, 0xdb, 0x5e, 0x14, 0x2c,
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_1_power_5(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x2f, 0x69, 0xb7, 0xea, 0x10, 0xc8, 0xa2, 0x2e,
                0xd3, 0x1b, 0xaa, 0x55, 0x9b, 0x45, 0x5c, 0x42,
                0xf4, 0x3f, 0x35, 0xa4, 0x61, 0x36, 0x3a, 0xe9,	
                0x49, 0x86, 0x79, 0x4f, 0xe7, 0xc1, 0x83, 0x01
            ]),
            Fp::from_bytes([
                0x4b, 0x2c, 0x0c, 0x6e, 0xee, 0xb8, 0xc6, 0x24,	
                0xc0, 0x2a, 0x8e, 0x67, 0x99, 0xcb, 0x80, 0xb0,	
                0x7d, 0x9f, 0x72, 0xc7, 0x46, 0xb2, 0x7f, 0xa2,	
                0x75, 0x06, 0xfd, 0x76, 0xca, 0xf2, 0xac, 0x12
            ])
        );
        self.mul(y)
    }

    
    fn mul_by_non_residue_2_power_1(self: Self) -> Self {
        let y = Fp::from_bytes([
            0x49, 0xfd, 0x7c, 0x60, 0xe5, 0x44, 0xbd, 0xe4, 0x3d,	
            0x6e, 0x96, 0xbb, 0x9f, 0x06, 0x8f, 0xc2, 0xb0, 0xcc,	
            0xac, 0xe0, 0xe7, 0xd9, 0x6d, 0x5e, 0x29, 0xa0, 0x31,	
            0xe1, 0x72, 0x4e, 0x64, 0x30
        ]);
        self.mul_by_b0(y)
    }

    fn mul_by_non_residue_2_power_2(self: Self) -> Self {
        let y = Fp::from_bytes([
            0x48, 0xfd, 0x7c, 0x60, 0xe5, 0x44, 0xbd, 0xe4, 0x3d,	
            0x6e, 0x96, 0xbb, 0x9f, 0x06, 0x8f, 0xc2, 0xb0, 0xcc,	
            0xac, 0xe0, 0xe7, 0xd9, 0x6d, 0x5e, 0x29, 0xa0, 0x31,	
            0xe1, 0x72, 0x4e, 0x64, 0x30
        ]);
        self.mul_by_b0(y)
    }

    fn mul_by_non_residue_2_power_3(self: Self) -> Self {
        let y = Fp::from_bytes([
            0x46, 0xfd, 0x7c, 0xd8, 0x16, 0x8c, 0x20, 0x3c, 0x8d,	
            0xca, 0x71, 0x68, 0x91, 0x6a, 0x81, 0x97, 0x5d, 0x58,	
            0x81, 0x81, 0xb6, 0x45, 0x50, 0xb8, 0x29, 0xa0, 0x31,	
            0xe1, 0x72, 0x4e, 0x64, 0x30
        ]);
        self.mul_by_b0(y)
    }

    fn mul_by_non_residue_2_power_4(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xfe, 0xff, 0xff, 0x77, 0x31, 0x47, 0x63, 0x57, 0x4f,	
            0x5c, 0xdb, 0xac, 0xf1, 0x63, 0xf2, 0xd4, 0xac, 0x8b,	
            0xd4, 0xa0, 0xce, 0x6b, 0xe2, 0x59
        ]);
        self.mul_by_b0(y)
    }

    fn mul_by_non_residue_2_power_5(self: Self) -> Self {
        let y = Fp::from_bytes([
            0xff, 0xff, 0xff, 0x77, 0x31, 0x47, 0x63, 0x57, 0x4f,	
            0x5c, 0xdb, 0xac, 0xf1, 0x63, 0xf2, 0xd4, 0xac, 0x8b,	
            0xd4, 0xa0, 0xce, 0x6b, 0xe2, 0x59
        ]);
        self.mul_by_b0(y)
    }

    fn mul_by_non_residue_3_power_1(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x7f, 0xa6, 0xd4, 0x1e, 0x39, 0x7d, 0x6f, 0xe8,	
                0x4a, 0xd2, 0x55, 0xbe, 0x8d, 0xb3, 0x4c, 0x89,	
                0x90, 0xaa, 0xac, 0xd0, 0x8c, 0x60, 0xe9, 0xef,	
                0xbb, 0xe4, 0x82, 0xcc, 0xcf, 0x81, 0xdc, 0x19
            ]),
            Fp::from_bytes([
                0x01, 0xc1, 0xc0, 0xf4, 0x2b, 0xaa, 0x94, 0x76,	
                0xec, 0x39, 0xd4, 0x97, 0xe3, 0xa5, 0x03, 0x7f,	
                0x9d, 0x13, 0x76, 0x35, 0xe3, 0xee, 0xcb, 0x06,	
                0x73, 0x7d, 0xe7, 0x0b, 0xb6, 0xf8, 0xab
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_3_power_2(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x6d, 0xfb, 0xdc, 0x7b, 0xe8, 0x6e, 0x74, 0x7b,	
                0xd3, 0x42, 0x69, 0x5d, 0x3d, 0xfd, 0x5f, 0x80,	
                0xac, 0x25, 0x9f, 0x95, 0x77, 0x1c, 0xff, 0xba,	
                0x0a, 0xef, 0x55, 0xb7, 0x78, 0xe0, 0x56, 0x08
            ]),
            Fp::from_bytes([
                0xde, 0x86, 0xa5, 0xaa, 0x2b, 0xab, 0x0c, 0x38,	
                0x31, 0x26, 0xff, 0x98, 0xbf, 0x31, 0xdf, 0x0f,	
                0x4f, 0x09, 0x26, 0xec, 0x6d, 0x0e, 0xf3, 0xa9,	
                0x6f, 0x76, 0xd1, 0xb3, 0x41, 0xde, 0xf1, 0x04
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_3_power_3(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0xed, 0xe9, 0xdc, 0x66, 0xd0, 0x8a, 0xcc, 0x5f,	
                0xf4, 0x70, 0xa8, 0xbe, 0xa3, 0x89, 0xd6, 0xbb,	
                0xa3, 0x5e, 0x9e, 0xca, 0x1d, 0x7f, 0xf1, 0xdb,	
                0x4c, 0xaa, 0x96, 0x98, 0x6d, 0x5b, 0x27, 0x2a
            ]),
            Fp::from_bytes([
                0x64, 0x4c, 0x59, 0xb2, 0xb3, 0x0c, 0x4d, 0xb9,	
                0xba, 0x6e, 0xcf, 0xd8, 0xc7, 0xec, 0x00, 0x76,	
                0x32, 0xe9, 0x07, 0x95, 0x0e, 0x90, 0x4b, 0xb1,	
                0x8f, 0x9b, 0xf0, 0x34, 0xb6, 0x11, 0xa4, 0x28
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_3_power_4(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x66, 0xf0, 0xcb, 0x3c, 0xbc, 0x92, 0x1a, 0x0e,	
                0xcb, 0x6b, 0xb0, 0x75, 0x45, 0x09, 0x33, 0xe6,	
                0x4e, 0x44, 0xb2, 0xb5, 0xf7, 0xe0, 0xbe, 0x19,	
                0xab, 0x8d, 0xc0, 0x11, 0x66, 0x8c, 0xc5, 0x0b
            ]),
            Fp::from_bytes([
                0x9f, 0x23, 0x0c, 0x73, 0x9d, 0xed, 0xe3, 0x5f,	
                0xe5, 0x96, 0x7f, 0x73, 0x08, 0x9e, 0x4a, 0xa4,	
                0x04, 0x1d, 0xd2, 0x0c, 0xef, 0xf6, 0xb0, 0xfe,	
                0x12, 0x0a, 0x91, 0xe1, 0x99, 0xe9, 0xd5, 0x23
            ])
        );
        self.mul(y)
    }

    fn mul_by_non_residue_3_power_5(self: Self) -> Self {
        let y = Fp2::new(
            Fp::from_bytes([
                0x43, 0x1b, 0x26, 0x76, 0x70, 0x84, 0xde, 0xeb,	
                0xa5, 0x84, 0x7c, 0x96, 0x98, 0x80, 0xd6, 0x2e,	
                0x69, 0x3f, 0x4d, 0x3b, 0xfa, 0x99, 0x16, 0x71,	
                0x05, 0x09, 0x2c, 0x95, 0x44, 0x90, 0xc4, 0x13
            ]),
            Fp::from_bytes([
                0x99, 0x24, 0x28, 0x84, 0x13, 0x04, 0x25, 0x1f,	
                0x21, 0x80, 0x02, 0x20, 0xea, 0xda, 0x2d, 0x3e,	
                0x3d, 0x63, 0x48, 0x2a, 0x28, 0xb2, 0xb1, 0x9f,	
                0x0b, 0xdd, 0xb1, 0x59, 0x6a, 0x36, 0xdb, 0x16
            ])
        );
        self.mul(y)
    }
}